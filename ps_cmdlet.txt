> $PSVersionTable  #Give the version of the powershell currently running

#Switching between powershell versions
> powershell -version 3.0  #changes the powershell version to 3.0 
> $PSVersionTable  #to check the current version of powershell runnung
> Start-Process Powershell -verb runas   # to start powershell as administrator from the commandline 

##Three steps before using Powershell
> Update-Help  #Updates the powershell makes sure you have the latest and greates version 
> Update-Help -Verbose -Force -ErrorAction SilentlyContinue 
##Enable Powershell script execution. As a security precaution the ability to execute powershell script is disabled by default 
> Get-ExecutionPolicy
> Set-ExecutionPolicy RemoteSigned   #Setting the execution policy

##On each computer that you want remote commands to be executed on, run the following Powershell command except WS 2012 its set by default
> Enable-PSRemoting

##A Powershell profile is a text file that is automatically loaded everytime powershell is started. Powershell profiles are used to
##persist certain customization like -Aliases, -Functions, -Variables. You dont actually have a Powershell profile untill you create one
##To create a Powershell profile create a text file with the specified name and in the specified location based on the type of profile
##you want to use. There are 4 types of profile in Powershell -AllUsersAllHosts: Applies to all users and all shells located@%windir%\
##System32\WindowsPowerShell\v1.0\profile.ps1  -AllUsersCurrentHost: Applies to all users, but only the Microsoft.Powershell shell
##located@%windir%\System32\WindowsPowerShell\v1.0\Microsoft.PowerShell_profile.ps1  -CurrentUserAllHosts: Applies only to the current user, but all
##shells located@%UserProfile%\My Documents\WindowsPowerShell\profile.ps1  -CurrentUserCurrentHost: Applies only to the current user and the
##Microsoft.Powershell shell located@%UserProfile%\My Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1 

> $Profile  # built in variable dispalys the profile location but the path and the profile do not exists there until you create them
> Test-Path $Profile  # tells you if you have a profile established
> New-Item -path $profile -type file -force  # to create a profile 

##Cmdlet are commands in the Powershell environment
##Cmdlets perform an action and typically return a Microsoft .Net Framework object to the next command in the pipeline
##Cmdlets are designed to have similar structure and syntax: Verb-Noun -parameter arguement 
##The verb describes the action that is to take place
##The noun describes the target of that action 
##The parameter is an optional characteristic or property of the noun 
##Powershell parameter is always preceded by a hyphen (-)
##The arguement is a value that can be provided for a parameter 

##There are six common cmdlet verbs
##Get     #Queries a specific object
##Set     #Modifies the settings of an object
##Enable  #Enables a settings
##Disable #Disables a setting 
##New     #Creates a new instance of an item 
##Remove  #Removes an instance of an item 
##There are many other verbs  Add, Clear, Export, Format, Import, Invoke, etc
##Anything in the [] is optional 
> Get-Process [[-name] string[]] [-ComponentName string[]] [-File VersionInfo] [-Module] [CommonParameters]
> Get-Process -name powerpnt 
> Get-Process   #returns a list of all the processes running in the system 
> Get-Help 
> Get-Help Get-Process 

> Get-Help <cmdlet>  ## to display information on one page
> Help <cmdlet>

##<cmdlet> -?  # displays information on multiple pages

> Get-Help <cmdlet> -examples  # to see example of the command
> Get-Help <cmdlet> -detailed  # For more information 
> Get-Help <cmdlet> -full 
> Get-Help <cmdlet> -ShowWindow
> Get-Help <cmdlet> -online
> Get-Command   # returns a list of the the commands in the version you are running 
> Get-Command | more   # gives information page by page by hitting the space key
> Get-Command -type cmdlet   #returns a list of only cmdlets

> Format-Wide     #Displays only the default property of an object by default
> Format-List     #Displays an object in the form of a listing, with each property labeled and displayed on a sepaerate line 
> Format-Table    #Produces a tabular layout
> Format-Custom   #Formats the output of a command as defined in an alternative view

> Get-Process | Format-Wide 
> Get-Process | Format-Wide -column 6
> Get-Process | Format-List
> Get-Process -name powershell | Format-List -Property ProcessName,FileVersion,StartTime,Id
> Get-Process -name powershell | Format-List -Property *
> Get-Process -name powershell | Format-Table
> Get-Process -name powershell | Format-Table -Property Path,Name,Id,Company -Autosize
> Get-Process -name powershell | Format-Table -Wrap -Property Name,Id,Company,Path  
> Get-Process -name powershell | Format-Table -Wrap -Autosize -Property Name,Id,Path -GroupBy Company 

##The Get-Member cmdlet retrives information about .Net objects. It displays the properties and methods of the object. The members of the object
> $m | Get-Member 
> $m | Get-Member -membertype methods 

> Get-ChildItem  ## Gets the files and folders in a file system drive.  Aliases ls,dir,gci
> Get-ChildItem -recurse  ## Gets the files and folders in a file system drive recursively
> gci c:\*.* -include *.txt ## Searches all the locations and returns only text files 
> Get-ChildItem | Sort-Object  ## Retrieves child items in the location. Pipes the item to the next cmdlet. Sorts objects by the name property by default  

## $_ is an object that is populated with the current item thats in the pipeline 

> Get-Service | Where-Object {$_.DisplayName -Match "MS"} 

## To run a script make sure Execution Policy is set to RemoteSigned and type the path and name of the script file. The path is required even
## the script is located in the current directory. This is a deliberate security measure from MIcrosoft to make it more difficult for malicious 
## code to run scripts and also to make it more difficult to inadvertently execute a script

> Start-Sleep <TimeInSec>

## Launching a powershell script from desktop shortcut
## 1) Create a shortcut 2) Right click the shortcut and choose properties 3) Click on the shortcut tab 4) In the target field enter:
## %SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -ExecutionPolicy Bypass -File "C:\path\to\powershellScript.ps1"

## If the variable contains spaces it must be enclosed in braces {}. Example: ${Variable Name} 
## Powershell will determine the data-type of the variable for you and it may change it as well
## We can explicitly set variables to a specific data type. Powershell will not change explicitly set data types. Examples: [int]$ml=7
## [System.Int32]$a=4, [datetime], [string], [char], [double], [int], [boolean] 

> $serverIP='10.10.10.10'
> Set-Variable serverIP -option Readonly  # this sets the value of the variable to the desired value so that no one can change it
> Set-Variable serverIP -option none -force  # this undoes the Readonly option
> Remove-Variable variableName -force 

## A constant is a write protected variable. Once the value is set it cannot be easily changed. The New-Variable cmdlet is used to create constant in Powershell
> Set-Variable variableName -option Constant -value '12.12.12.12'  #to create a constant

## Comparison operators: -eq -lt -gt, -ge, -le, -ne    # These operators can be used to compare strings
## -ieq  # To perform case-insensitive comparisons and is the default
## -ceq  # To perform case sensitive comparisons
## Logical operators: -not ! -and -or 

#######IF Statement#######################
> $day = Get-Date
> If (day.day -eq 12)
  {
     Write-Host "Today"
  }
  else
  {
    Write-Host "Not Today"
  }
############Syntax:
> If (condition) {run this code block}

#Syntax ElseIf:
> If (condition) {run this code block}
> ElseIf (condition) {run this code block}
> You cam add more elseif to test the condition
>

############Syntax: ElseIf
> If (condition) {run this code block}
> ElseIf (condition) {run this code block}
>
>
> Else {run this code block} 

#Looping is a basic programming process that allows us to execute the same command multiple times 
#For Each-Object : Loops through a collection of objects
#For : Executes a specific number of times 
#While : Executes as long as a condition remains true; tests the condition first
#Do While : Executes once then tests the condition then repeats as long as the condition remains true 
#Do Until : Executes once and repeats until a condition is true

########Syntax For Loops
> $a=5,6,7,8,9
> $a | ForEach {write-host $_}

> ForEach ($value in $a)
> {write-host $value}

> $a="Mark","Bob","Jane"
> ForEach ($value in $a)
> {write-host $value} 

> $a | ForEacH {write-host $_} 

> For ($a; $a -le 5; $a++) {write-host $a}

#Do While Loop
> $a=1
> Do {write-host $a; $a++} 
> While ($a -lt 5}

> $b=1
> Do {write-host $b; $b++}
> Until ($b -gt 5)


###Regex. Regular expression is a pattern that is used to locate matching data
###Regular expression cam match data using two methods : -Literal Matches -Pattern Matches 

#Syntax : Literal Match
> "Microsoft" -match "soft"
> "Software" -cmatch "soft"   #This will return False since its a case sensitive match  

