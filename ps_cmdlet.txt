> $PSVersionTable  #Give the version of the powershell currently running

#Switching between powershell versions
> powershell -version 3.0  #changes the powershell version to 2.0 
> $PSVersionTable  #to check the current version of powershell runnung
> Start-Process Powershell -verb runas   # to start powershell as administrator from the commandline 

##Three steps before using Powershell
> Update-Help  #Updates the powershell makes sure you have the latest and greates version 
> Update-Help -Verbose -Force -ErrorAction SilentlyContinue 
##Enable Powershell script execution. As a security precaution the ability to execute powershell script is disabled by default 
> Get-ExecutionPolicy
> Set-ExecutionPolicy RemoteSigned   #Setting the execution policy

##On each computer that you want remote commands to be executed on, run the following Powershell command except WS 2012 its set by default
> Enable-PSRemoting

##A Powershell profile is a text file that is automatically loaded everytime powershell is started. Powershell profiles are used to
##persist certain customization like -Aliases, -Functions, -Variables. You dont actually have a Powershell profile untill you create one
##To create a Powershell profile create a text file with the specified name and in the specified location based on the type of profile
##you want to use. There are 4 types of profile in Powershell -AllUsersAllHosts: Applies to all users and all shells located@%windir%\
##System32\WindowsPowerShell\v1.0\profile.ps1  -AllUsersCurrentHost: Applies to all users, but only the Microsoft.Powershell shell
##located@%windir%\System32\WindowsPowerShell\v1.0\Microsoft.PowerShell_profile.ps1  -CurrentUserAllHosts: Applies only to the current user, but all
##shells located@%UserProfile%\My Documents\WindowsPowerShell\profile.ps1  -CurrentUserCurrentHost: Applies only to the current user and the
##Microsoft.Powershell shell located@%UserProfile%\My Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1 

> $Profile  # built in variable dispalys the profile location but the path and the profile do not exists there until you create them
> Test-Path $Profile  # tells you if you have a profile established
> New-Item -path $profile -type file -force  # to create a profile 

##Cmdlet are commands in the Powershell environment
##Cmdlets perform an action and typically return a Microsoft .Net Framework object to the next command in the pipeline
##Cmdlets are designed to have similar structure and syntax: Verb-Noun -parameter arguement 
##The verb describes the action that is to take place
##The noun describes the target of that action 
##The parameter is an optional characteristic or property of the noun 
##Powershell parameter is always preceded by a hyphen (-)
##The arguement is a value that can be provided for a parameter 

##There are six common cmdlet verbs
##Get     #Queries a specific object
##Set     #Modifies the settings of an object
##Enable  #Enables a settings
##Disable #Disables a setting 
##New     #Creates a new instance of an item 
##Remove  #Removes an instance of an item 
##There are many other verbs  Add, Clear, Export, Format, Import, Invoke, etc
##Anything in the [] is optional 
> Get-Process [[-name] string[]] [-ComponentName string[]] [-File VersionInfo] [-Module] [CommonParameters]
> Get-Process -name powerpnt 
> Get-Process   #returns a list of all the processes running in the system 
> Get-Help 
> Get-Help Get-Process 

> Get-Help <cmdlet>  ## to display information on one page
> Help <cmdlet>

##<cmdlet> -?  # displays information on multiple pages

> Get-Help <cmdlet> -examples  # to see example of the command
> Get-Help <cmdlet> -detailed  # For more information 
> Get-Help <cmdlet> -full 
> Get-Help <cmdlet> -ShowWindow
> Get-Command   # returns a list of the the commands in the version you are running 
> Get-Command | more   # gives information page by page by hitting the space key
> Get-Command -type cmdlet   #returns a list of only cmdlets

> Format-Wide     #Displays only the default property of an object by default
> Format-List     #Displays an object in the form of a listing, with each property labeled and displayed on a sepaerate line 
> Format-Table    #Produces a tabular layout
> Format-Custom   #Formats the output of a command as defined in an alternative view

> Get-Process | Format-Wide 
> Get-Process | Format-Wide -column 6
> Get-Process | Format-List
> Get-Process -name powershell | Format-List -Property ProcessName,FileVersion,StartTime,Id
> Get-Process -name powershell | Format-List -Property *
> Get-Process -name powershell | Format-Table
> Get-Process -name powershell | Format-Table -Property Path,Name,Id,Company -Autosize
> Get-Process -name powershell | Format-Table -Wrap -Property Name,Id,Company,Path  
> Get-Process -name powershell | Format-Table -Wrap -Autosize -Property Name,Id,Path -GroupBy Company 

##The Get-Member cmdlet retrives information about .Net objects. It displays the properties and methods of the object. The members of the object
> $m | Get-Member 
> $m | Get-Member -membertype methods 

> Get-ChildItem  ## Gets the files and folders in a file system drive.  Aliases ls,dir,gci
> Get-ChildItem -recurse  ## Gets the files and folders in a file system drive recursively
> gci c:\*.* -include *.txt ## Searches all the locations and returns only text files  